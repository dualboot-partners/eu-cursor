---
description: This rule governs the architecture and organization of frontend components using Feature-Slice Design methodology. It should be applied whenever: (1) Creating new frontend components, (2) Refactoring existing components, (3) Planning feature implementation, (4) Discussing component architecture, or (5) Reviewing frontend code structure. The rule ensures consistent component organization, proper separation of concerns, and maintainable code structure. It's particularly important when determining where to place new components, how to organize types and models, and how to structure the relationships between different parts of the frontend application. This rule helps maintain a scalable and maintainable frontend architecture by providing clear guidelines on component placement, naming conventions, and responsibility boundaries.
globs:
alwaysApply: false
---
# Feature slice desogn

## Directory Structure

### Layer Organization
```
app/frontend/
├── app/          # Application initialization and global providers
├── entities/     # Business entities (User, Project, etc.)
├── features/     # Business features (Auth, ProjectManagement, etc.)
├── widgets/      # Composite components combining entities and features
├── pages/        # Route components
└── shared/       # Shared code (API, UI kit, utilities)
```

### Segment Organization
Each layer should organize code into segments:
```
layer/
├── model/       # Domain logic, types, and constants
├── ui/          # UI components
├── api/         # API integration
├── lib/         # Utilities and helpers
└── types/       # Type definitions (if not in model)
```

## Component Organization

### Simple Components
Single file components go directly in the ui/ folder:
```
features/auth/ui/LoginForm.tsx
```

### Complex Components
Components with multiple files use model segment for types:
```
features/auth/
├── model/
│   └── types.ts    # All feature types including component props
└── ui/
    └── LoginForm.tsx
```

## Type Organization

### Business Types
Define in `model/types.ts` and export through layer's public API:
```typescript
// entities/project/model/types.ts
export interface Project {
  id: number;
  name: string;
  status: ProjectStatus;
}
```

### Component Props
Define in model/types.ts with other related types:
```typescript
// features/auth/model/types.ts
export interface LoginFormProps {
  onSuccess?: () => void;
}
```

## Public API

### Layer Exports
Each layer must have index.ts that exports only what's needed by other layers:
```typescript
// entities/project/index.ts
export type { Project } from './model/types';
export { ProjectCard } from './ui/ProjectCard';
export { useProject } from './api/queries';
```

## Import Rules

### Allowed Dependencies
```mermaid
graph TD
    shared[shared] --> none[no dependencies]
    entities[entities] --> shared
    features[features] --> entities & shared
    widgets[widgets] --> features & entities & shared
    pages[pages] --> widgets & features & entities & shared
    app[app] --> all[all layers]
```

### Import Style
```typescript
// ✅ Correct - Import from layer's public API
import { Button } from 'shared/ui/button';
import { Project } from 'entities/project';
import { LoginForm } from 'features/auth';

// ❌ Incorrect - Import from internal files
import { Button } from 'shared/ui/button/Button';
import { Project } from 'entities/project/model/types';
```

## File Naming

### Component Files
- Use PascalCase for component files
- Examples:
  - `LoginForm.tsx`
  - `ProjectCard.tsx`

### Non-Component Files
- Use camelCase for utility files
- Examples:
  - `types.ts`
  - `constants.ts`
  - `queries.ts`

### Index Files
- Always name `index.ts`
- Use for public API exports only
- Keep them minimal and focused

## Code Style

### Component Structure
```typescript
import { dependencies } from 'external';
import { internal } from './internal';
import type { Props } from '../model/types';

export const Component = ({ prop1, prop2 }: Props) => {
  // hooks first
  const state = useState();

  // handlers second
  const handleClick = () => {};

  // render last
  return <div />;
};
```

### Type Exports
```typescript
// ✅ Correct
export type { Thing } from './types';

// ❌ Incorrect
export { type Thing } from './types';
```

## Testing

### Test File Location
Place test files next to the code they test:
```
feature/
├── ui/
│   ├── Component.tsx
│   └── Component.test.tsx
└── model/
    ├── utils.ts
    └── utils.test.ts
```

### Test Naming
- Use `.test.ts(x)` suffix for unit tests
- Use `.spec.ts(x)` suffix for integration tests

## State Management

### Local State
- Use React's useState/useReducer for component-local state
- Keep in component file

### Feature State
- Place in feature's model segment
- Export through feature's public API
```
features/auth/
├── model/
│   ├── store.ts
│   └── types.ts
└── index.ts
```

### Global State
- Place in app layer or relevant feature
- Document dependencies and usage

## Error Handling

### API Errors
- Handle in api segment
- Transform to domain errors
- Provide typed error responses

### UI Errors
- Handle at appropriate level
- Show user-friendly messages
- Log technical details when needed
